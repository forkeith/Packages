%YAML 1.2
---
name: MySQL
scope: source.sql.mysql
version: 2

extends: Packages/SQL/SQL (basic).sublime-syntax

variables:
  additional_reserved: |-
    (?xi: begin | end | return | grant | rename | revoke | show )

  function_parameter_modifier: |-
    (?xi: in\s*out | in | out )

  simple_types: |-
    (?xi: bigint | bigserial | bit | bool | boolean | box | bytea | cidr | circle
    | date | datetime | double\s+precision | enum | inet | integer | line
    | longtext | lseg | macaddr | money | ntext | oid | path | point | polygon
    | real | serial | smallint | sysdate | sysname | text | tinytext )
  types_with_optional_number: |-
    (?xi: bit\s+varying | character\s+(?:varying)? | tinyint | var\s+char | float
    | int | interval | numeric | decimal | times? | timestamp(?:s | tz)? )

  time_unit: |-
    (?xi: year | quarter | month | day | hour | minute | week | second | year_month
    | day_hour | day_minute | day_second | hour_minute | hour_second | minute_second )

contexts:
  sql:
    - meta_append: true
    - include: regexps

  statements:
    - meta_prepend: true
    - include: grant-statements
    - include: rename-statements
    - include: revoke-statements
    - include: show-statements

###[ COMMENTS ]################################################################

  comments:
    - meta_append: true
    - match: '#'
      scope: punctuation.definition.comment.sql
      push: inside-number-sign-comment

  double-dash-comments:
    - meta_include_prototype: false
    - match: '--(?=\s)'
      scope: punctuation.definition.comment.sql
      push: inside-double-dash-comment

  inside-number-sign-comment:
    - meta_include_prototype: false
    - meta_scope: comment.line.number-sign.sql
    - match: \n
      pop: 1

###[ DDL CREATE STATEMENTS ]###################################################

  create-statements:
    - meta_prepend: true
    - match: \b(?i:create\s+or\s+replace)\b
      scope: keyword.other.ddl.sql
      push:
        - create-meta
        - create-target

  create-target:
    - meta_prepend: true
    # index modifiers
    - match: \b(?i:unique|fulltext|spatial)\b
      scope: keyword.other.ddl.sql
    - include: algorithms
    - include: definers
    - include: create-database
    - include: create-event
    - include: create-role
    - include: create-user

  create-database:
    # https://mariadb.com/kb/en/create-database
    - match: \b(?i:database|schema)\b
      scope: keyword.other.ddl.sql
      set:
        - create-database-args
        - expect-database-creation-name
        - create-database-condition

  create-database-condition:
    - meta_include_prototype: false
    - include: maybe-condition

  create-database-args:
    - meta_scope: meta.database.sql
    - match: \b(?i:comment)\b
      scope: keyword.other.ddl.sql
    - match: \b(?i:(?:default\s+)?(?:character\s+set|collate))\b
      scope: variable.parameter.database.sql
    - match: =
      scope: keyword.operator.assignment.sql
    - include: strings
    - include: else-pop

  create-event:
    # https://mariadb.com/kb/en/create-event
    - match: \b(?i:event)\b
      scope: keyword.other.ddl.sql
      set:
        - create-event-args
        - expect-event-creation-name
        - create-event-condition

  create-event-condition:
    - meta_include_prototype: false
    - include: maybe-condition

  create-event-args:
    - meta_scope: meta.event.sql
    - include: event-options
    - include: pop-on-top-level-reserved-word

  create-role:
    # https://mariadb.com/kb/en/create-role
    - match: \b(?i:role)\b
      scope: keyword.other.ddl.sql
      set:
        - create-role-args
        - expect-user-name-declaration
        - create-role-condition

  create-role-condition:
    - meta_include_prototype: false
    - include: maybe-condition

  create-role-args:
    - meta_scope: meta.user.sql
    - include: maybe-with-admin-user

  create-user:
    # https://mariadb.com/kb/en/create-user
    - match: \b(?i:user)\b
      scope: keyword.other.ddl.sql
      set:
        - create-user-args
        - create-user-name-list
        - user-identification
        - expect-user-name-declaration
        - create-user-condition

  create-user-condition:
    - meta_include_prototype: false
    - include: maybe-condition

  create-user-name-list:
    - match: ','
      scope: punctuation.separator.sequence.sql
      push:
        - user-identification
        - expect-user-name-declaration
    - include: else-pop

  create-user-args:
    - meta_scope: meta.user.sql
    - include: user-options

###[ DDL DROP STATEMENTS ]#####################################################

  drop-target:
    - meta_prepend: true
    - include: algorithms
    - include: drop-database
    - include: drop-event
    - include: drop-user

  drop-database:
    # https://mariadb.com/kb/en/drop-database
    - match: \b(?i:database|schema)\b
      scope: keyword.other.ddl.sql
      set:
        - drop-database-args
        - expect-database-name
        - drop-database-condition

  drop-database-condition:
    - meta_include_prototype: false
    - include: maybe-condition

  drop-database-args:
    - meta_include_prototype: false
    - meta_scope: meta.database.sql
    - include: immediately-pop

  drop-event:
    # https://mariadb.com/kb/en/drop-event
    - match: \b(?i:event)\b
      scope: keyword.other.ddl.sql
      set:
        - drop-event-args
        - expect-event-name
        - drop-event-condition

  drop-event-condition:
    - meta_include_prototype: false
    - include: maybe-condition

  drop-event-args:
    - meta_include_prototype: false
    - meta_scope: meta.event.sql
    - include: immediately-pop

  drop-user:
    # https://mariadb.com/kb/en/drop-role
    # https://mariadb.com/kb/en/drop-user
    - match: \b(?i:role|user)\b
      scope: keyword.other.ddl.sql
      set:
        - drop-user-args
        - expect-user-name
        - drop-user-condition

  drop-user-condition:
    - meta_include_prototype: false
    - include: maybe-condition

  drop-user-args:
    - meta_scope: meta.user.sql
    - include: user-name-list

###[ DDL ALTER STATEMENTS ]####################################################

  alter-target:
    - meta_prepend: true
    - include: algorithms
    - include: definers
    - include: alter-database
    - include: alter-event
    - include: alter-user

  alter-columns:
    - meta_prepend: true
    - match: \b(?i:(change)\s+(column))\b
      captures:
        1: keyword.other.ddl.sql
        2: keyword.other.ddl.sql
      push:
        - expect-type
        - expect-column-name-declaration
        - expect-column-name

  alter-database:
    # https://mariadb.com/kb/en/alter-database
    - match: \b(?i:database|schema)\b
      scope: keyword.other.ddl.sql
      set:
        - alter-database-args
        - expect-database-name
        - alter-database-condition

  alter-database-condition:
    - meta_include_prototype: false
    - include: maybe-condition

  alter-database-args:
    - meta_scope: meta.database.sql
    - match: \b(?i:(upgrade)(?:\s+(data\s+directory\s+name))?)\b
      captures:
        1: keyword.other.ddl.sql
        2: keyword.other.ddl.sql
      pop: 1
    - include: create-database-args

  alter-event:
    # https://mariadb.com/kb/en/alter-event
    - match: \b(?i:event)\b
      scope: keyword.other.ddl.sql
      set:
        - alter-event-args
        - expect-event-name
        - alter-event-condition

  alter-event-condition:
    - meta_include_prototype: false
    - include: maybe-condition

  alter-event-args:
    - meta_scope: meta.event.sql
    - include: event-options
    - include: pop-on-top-level-reserved-word

  alter-user:
    # https://mariadb.com/kb/en/alter-user
    - match: \b(?i:user)\b
      scope: keyword.other.ddl.sql
      set:
        - alter-user-args
        - expect-user-identification-list
        - user-identification
        - expect-user-name
        - alter-user-condition

  alter-user-condition:
    - meta_include_prototype: false
    - include: maybe-condition

  alter-user-args:
    - meta_scope: meta.user.sql
    - include: user-options

###[ DML STATEMENTS ]##########################################################

  dml-statements:
    - meta_append: true
    - match: \b(?i:insert(\s+(?:ignore\s+)?into)?)\b
      scope: keyword.other.dml.sql
      push: expect-table-name
    - match: \b(?i:limit)\b
      scope: keyword.other.dml.sql

  joins:
    - meta_append: true
    - match: \b(?i:straight_join|natural)\b
      scope: keyword.other.dml.sql

###[ DML SET STATEMENTS ]######################################################

  set-target:
    - meta_prepend: true
    - include: set-password
    - include: set-role

  set-password:
    # https://mariadb.com/kb/en/set-password
    - match: \b(?i:password)\b
      scope: keyword.other.dml.sql
      set:
        - set-other-assignment
        - maybe-for-user

  set-role:
    # https://mariadb.com/kb/en/set-role
    # https://mariadb.com/kb/en/set-default-role
    - match: \b(?i:(?:(default)\s+)?(role))\b
      captures:
        1: keyword.other.dml.sql
        2: keyword.other.dml.sql
      set:
        - maybe-for-user
        - set-role-name

  set-role-name:
    - match: \b(?i:none)\b
      scope: constant.language.null.sql
      pop: 1
    - include: expect-user-name

  set-other-assignment:
    - match: =
      scope: keyword.operator.assignment.sql
      set: set-other-value
    - include: else-pop

  set-other-value:
    - include: expressions
    - include: pop-on-top-level-reserved-word

###[ GRANT STATEMENTS ]########################################################

  grant-statements:
    # https://mariadb.com/kb/en/grant
    - match: \b(?i:grant)\b
      scope: keyword.other.ddl.sql
      push:
        - grant-meta
        - grant-options
        - grant-to-user
        - grant-target

  grant-meta:
    - meta_include_prototype: false
    - meta_scope: meta.statement.grant.sql
    - include: immediately-pop

  grant-target:
    # grant proxy on name to user
    - match: \b(?i:proxy)\b
      scope: keyword.other.ddl.sql
      set: grant-on-user
    # grant role name to
    - match: (?=\S+\s+(?i:to)\b)
      set: expect-user-name
    # grant operation on
    - match: (?=\S)
      set: grant-operations

  grant-operations:
    - match: (?=[;)]|\b(?i:grant|to|with)\b)
      pop: 1
    - include: on-privilidge-level
    - include: comma-separators
    - include: user-privilidges

  grant-on-user:
    - match: \b(?i:on)\b
      scope: keyword.other.ddl.sql
    - include: expect-user-name

  grant-to-user:
    - match: \b(?i:to)\b
      scope: keyword.other.ddl.sql
    - include: expect-user-identification-list

  grant-options:
    - include: user-grant-privilidges
    - include: user-resource-options
    - include: else-pop

###[ RENAME STATEMENTS ]#######################################################

  rename-statements:
    # https://mariadb.com/kb/en/rename-user
    - match: \b(?i:rename)\b
      scope: keyword.other.ddl.sql
      push:
        - rename-meta
        - rename-target

  rename-meta:
    - meta_include_prototype: false
    - meta_scope: meta.statement.rename.sql
    - include: immediately-pop

  rename-target:
    - match: \b(?i:user)\b
      scope: keyword.other.ddl.sql
      set:
        - rename-user
        - expect-user-name
    - include: else-pop

  rename-user:
    - match: \b(?i:to)\b
      scope: keyword.other.ddl.sql
      push: expect-user-name
    - include: user-name-list

###[ REVOKE STATEMENTS ]#######################################################

  revoke-statements:
    # https://mariadb.com/kb/en/revoke
    - match: \b(?i:revoke)\b
      scope: keyword.other.ddl.sql
      push:
        - revoke-meta
        - revoke-options
        - revoke-privilidges

  revoke-meta:
    - meta_include_prototype: false
    - meta_scope: meta.statement.revoke.sql
    - include: immediately-pop

  revoke-privilidges:
    - match: (?=[;)]|\b(?i:for|from)\b)
      pop: 1
    - include: on-privilidge-level
    - include: comma-separators
    - include: user-privilidges

  revoke-options:
    - match: \b(?i:for|from)\b
      scope: keyword.other.ddl.sql
      push:
        - user-name-list
        - expect-user-name
    - include: else-pop

###[ SHOW STATEMENTS ]#########################################################

  show-statements:
    - match: \b(?i:show)\b
      scope: keyword.other.dml.sql
      push:
        - show-meta
        - show-target

  show-meta:
    - meta_include_prototype: false
    - meta_scope: meta.statement.show.sql
    - include: immediately-pop

  show-target:
    - include: show-create
    - include: show-grants
    - include: else-pop

  show-create:
    - match: \b(?i:create)\b
      scope: keyword.other.ddl.sql
      set: show-create-target

  show-create-target:
    - include: show-create-event
    - include: show-create-user
    - include: show-create-other
    - include: else-pop

  show-create-event:
    # https://mariadb.com/kb/en/show-create-event
    - match: \b(?i:event)\b
      scope: keyword.other.ddl.sql
      set: expect-event-name

  show-create-user:
    # https://mariadb.com/kb/en/show-create-user
    - match: \b(?i:user)\b
      scope: keyword.other.ddl.sql
      set: expect-user-name

  show-create-other:
    - match: '{{simple_identifier}}'
      scope: keyword.other.ddl.sql
      set: expect-other-name

  show-grants:
    # https://mariadb.com/kb/en/show-grants
    - match: \b(?i:grants)\b
      scope: keyword.other.dml.sql
      set: maybe-for-user

###[ OTHER STATEMENTS ]########################################################

  other-statements:
    - match: \b(?i:begin(\s+work)?|start\s+transaction|commit(\s+work)?|rollback(\s+work)?)\b
      scope: keyword.other.luw.sql
    - match: \b(?i:end)\b
      scope: keyword.control.flow.end.sql
    - match: \b(?i:return)\b
      scope: keyword.control.flow.return.sql

###[ EXPRESSIONS ]#############################################################

  expressions:
    - meta_prepend: true
    - match: \b(?i:concatenate|convert|lower|substring|translate|trim|upper)\b
      scope: support.function.string.sql
    - match: \b(?i:using)\b
      scope: keyword.other.mysql

  built-in-user-function-calls:
    - match: \b(?i:(?:current|session|system)_(?:role|user))\b
      scope: support.function.scalar.sql
      push: function-call-arguments

  built-in-user-function-call:
    - match: \b(?i:(?:current|session|system)_(?:role|user))\b
      scope: support.function.scalar.sql
      set: function-call-arguments

  table-name-or-subquery:
    - meta_prepend: true
    - meta_include_prototype: false
    - match: (?=#)
      pop: 1
    - include: comments

###[ ALGORITHM EXPRESSIONS ]###################################################

  algorithms:
    - match: \b(?i:algorithm)\b
      scope: keyword.other.mysql
      push: algorithm-assignment

  algorithm-assignment:
    - match: =
      scope: keyword.operator.assignment.sql
      set: algorithm-value
    - include: else-pop

  algorithm-value:
    - match: \b(?i:merge|temptable|undefined)\b
      scope: constant.language.sql
      pop: 1
    - include: else-pop

  definers:
    - match: \b(?i:definer)\b
      scope: variable.parameter.definer.sql
      push: maybe-user-assignment

###[ EVENT EXPRESSIONS ]#######################################################

  event-options:
    - match: \b(?i:do)\b
      scope: keyword.other.ddl.sql
      pop: 1
    - match: \b(?i:comment)\b
      scope: keyword.other.ddl.sql
    - include: event-schedule-args
    - include: event-enable-args
    - include: event-completion-args

  event-completion-args:
    - match: \b(?i:(on)\s+(completion))\b
      captures:
        1: keyword.other.ddl.sql
        2: keyword.other.ddl.sql
    - match: \b(?i:preserve)\b
      scope: constant.language.sql

  event-enable-args:
    - match: \b(?i:(on)\s+(slave))\b
      captures:
        1: keyword.other.ddl.sql
        2: keyword.other.ddl.sql
    - match: \b(?i:enable|disable)\b
      scope: keyword.other.ddl.sql

  event-schedule-args:
    - match: \b(?i:(on)\s+(schedule))\b
      captures:
        1: keyword.other.ddl.sql
        2: keyword.other.ddl.sql
    - match: \b(?i:starts|ends)\b
      scope: keyword.other.ddl.sql
    - match: \+
      scope: keyword.operator.arithmetic.sql
    - match: \b(?i:at)\b
      scope: keyword.other.ddl.sql
    - match: \b(?i:every)\b
      scope: keyword.other.ddl.sql
    - match: \b(?i:interval)\b
      scope: storage.type.interval.sql
    - include: time-units
    - include: expressions

###[ FUNCTION EXPRESSIONS ]####################################################

  expect-function-characteristics:
    # https://mariadb.com/kb/en/create-function
    - meta_prepend: true
    - match: \b(?i:return)\b
      scope: keyword.control.flow.return.sql
      pop: 1
    - match: \b(?i:comment)\b
      scope: keyword.other.ddl.sql
    - match: \b(?i:not)\b
      scope: keyword.operator.logical.sql
    - match: \b(?i:deterministic)\b
      scope: storage.modifier.sql
    - match: \b(?i:(?:contains|no)\s+sql|(?:reads|modifies)\s+sql\s+data)\b
      scope: storage.modifier.sql
    - match: \b(?i:sql\s+security)\b
      scope: storage.modifier.sql
    - match: \b(?i:definer|invoker)\b
      scope: constant.language.user.sql

###[ USER MANAGEMENT EXPRESSIONS ]#############################################

  maybe-with-admin-user:
    - meta_scope: meta.user.sql
    - match: \b(?i:with)\b
      scope: keyword.other.ddl.sql
      set:
        - expect-user-name
        - maybe-admin
    - include: else-pop

  maybe-admin:
    - match: \b(?i:admin)\b
      scope: keyword.other.ddl.sql
      pop: 1
    - include: else-pop

  maybe-for-user:
    - match: \b(?i:for)\b
      scope: keyword.other.dml.sql
      set: expect-user-name
    - include: else-pop

  maybe-user-assignment:
    - match: =
      scope: keyword.operator.assignment.sql
      set: expect-user-name
    - include: else-pop

  expect-user-identification-list:
    # prevent prototypes from inheriting syntaxes
    - meta_include_prototype: false
    - include: comments
    - match: (?=\S)
      set:
        - user-identification-list
        - user-identification
        - expect-user-name

  user-identification-list:
    - match: ','
      scope: punctuation.separator.sequence.sql
      push:
        - user-identification
        - expect-user-name
    - include: else-pop

  user-identification:
    - match: \b(?i:identified|by)\b
      scope: keyword.other.ddl.sql
    - match: \b(?i:password)\b
      scope: storage.modifier.sql
    - match: \b(?i:via)\b
      scope: keyword.other.ddl.sql
      set:
        - user-auth-list
        - user-auth-args
        - expect-other-name
    - include: strings
    - include: else-pop

  user-name-list:
    - match: ','
      scope: punctuation.separator.sequence.sql
      push: expect-user-name
    - include: else-pop

  user-auth-list:
    # used by CREATE/ALTER user
    - match: ','
      scope: punctuation.separator.sequence.sql
      push:
        - user-auth-args
        - expect-other-name
    # used by GRANT statements
    - match: \b(?i:or)\b
      scope: keyword.operator.logical.sql
      push:
        - user-auth-args
        - expect-other-name
    - include: else-pop

  user-auth-args:
    - match: (?=,|\b(?i:account|on|or|require|with)\b)
      pop: 1
    - match: \b(?i:as)\b
      scope: keyword.operator.assignment.alias.sql
    - match: \b(?i:using)\b
      scope: keyword.other.ddl.sql
    - match: \b(?i:password)
      scope: support.function.sql
      push: function-call-arguments
    - include: strings
    - include: pop-on-top-level-reserved-word

  user-options:
    - include: user-account-options
    - include: user-password-options
    - include: user-resource-options
    - include: user-tls-options
    - include: numbers
    - include: strings
    - include: pop-on-top-level-reserved-word

  user-account-options:
    - match: \b(?i:account)\b
      scope: keyword.other.ddl.sql
    - match: \b(?i:unlock|lock)\b
      scope: constant.language.sql

  user-password-options:
    - match: \b(?i:(password)\s+(expire))\b
      captures:
        1: keyword.other.ddl.sql
        2: keyword.other.ddl.sql
    - match: \b(?i:day)\b
      scope: keyword.other.unit.sql
    - match: \b(?i:default|never|interval)\b
      scope: constant.language.sql

  user-resource-options:
    - match: \b(?i:with)\b
      scope: keyword.other.ddl.sql
    - match: |-
        \b(?xi: max_queries_per_hour | max_updates_per_hour
        | max_connections_per_hour | max_user_connections
        | max_statement_time )\b
      scope: constant.language.sql

  user-tls-options:
    - match: \b(?i:require)\b
      scope: keyword.other.ddl.sql
    - match: \b(?i:and)\b
      scope: keyword.operator.logical.sql
    - match: \b(?i:ssl|x509|cipher|issuer|subject)\b
      scope: constant.language.sql
    - match: \b(?i:none)\b
      scope: constant.language.null.sql

  user-privilidges:
    - include: column-reference-lists
    - include: user-all-privilidges
    - include: user-grant-privilidges

  user-all-privilidges:
    - match: \b(?i:all\s+privileges)\b
      scope: constant.language.sql

  user-grant-privilidges:
    - match: \b(?i:(?:grant|admin)\s+option)\b
      scope: constant.language.sql

  on-privilidge-level:
    - match: \b(?i:on)\b
      scope: keyword.other.ddl.sql
      set: privilidge-level

  privilidge-level:
    # object type
    - match: \b(?i:table|function|procedure|package)\b
      scope: storage.type.sql
    # wildcard privilidge level
    - match: (\*)(?:(\.)(\*))?
      scope: meta.other-name.sql
      captures:
        1: variable.language.wildcard.asterisk.sql
        2: punctuation.accessor.dot.sql
        3: variable.language.wildcard.asterisk.sql
      pop: 1
    # named privilidge level: database, table or method
    - include: expect-other-name

###[ COLUMN DECLARATIONS ]#####################################################

  inside-column-declaration-list:
    - meta_prepend: true
    - match: \b(?i:auto_increment)\b
      scope: keyword.other.mysql
    - match: \b(?i:(comment\s+on\s+(table|column|aggregate|constraint|database|domain|function|index|operator|rule|schema|sequence|trigger|type|view))\s+.*?\s+(is))
      scope: keyword.other.object-comments.sql

###[ TYPES ]###################################################################

  after-type:
    - meta_prepend: true
    - match: \b(?i:unsigned)\b
      scope: storage.modifier.mysql
      pop: 1
    - match: \b(?i:with(?:out)?\s+time\s+zone)\b
      scope: storage.type.sql
      pop: 1

###[ IDENTIFIERS ]#############################################################

  expect-user-name:
    # prevent prototypes from inheriting syntaxes
    - meta_include_prototype: false
    - include: comments
    - include: built-in-user-function-call
    - match: (?=\S)
      set: [user-name, user-identifier]

  user-name:
    - meta_include_prototype: false
    - meta_content_scope: meta.user-name.sql
    - include: immediately-pop

  expect-user-name-declaration:
    # prevent prototypes from inheriting syntaxes
    - meta_include_prototype: false
    - include: comments
    - match: (?=\S)
      set: [user-name-declaration, user-identifier]

  user-name-declaration:
    - meta_include_prototype: false
    - meta_content_scope: entity.name.user.sql
    - include: immediately-pop

  user-identifier:
    # https://mariadb.com/kb/en/grant/#account-names
    - meta_include_prototype: false
    - include: pop-on-top-level-reserved-word
    - match: ''
      set:
        - identifier-host-accessor
        - identifier-part

  identifier-host-accessor:
    - meta_include_prototype: false
    - match: \s*(@)
      captures:
        1: punctuation.accessor.at.sql
      set: identifier-host-part
    - include: immediately-pop

  identifier-host-part:
    - meta_include_prototype: false
    - match: \%
      scope: variable.language.wildcard.percent.sql
      pop: 1
    - match: (')(%)(')
      captures:
        1: punctuation.definition.identifier.begin.sql
        2: variable.language.wildcard.percent.sql
        3: punctuation.definition.identifier.end.sql
      pop: 1
    - match: (")(%)(")
      captures:
        1: punctuation.definition.identifier.begin.sql
        2: variable.language.wildcard.percent.sql
        3: punctuation.definition.identifier.end.sql
      pop: 1
    - match: (`)(%)(`)
      captures:
        1: punctuation.definition.identifier.begin.sql
        2: variable.language.wildcard.percent.sql
        3: punctuation.definition.identifier.end.sql
      pop: 1
    - include: identifier-part

###[ LITERALS ]################################################################

  time-units:
    - match: '{{time_unit}}'
      scope: keyword.other.unit.sql

  regexps:
    - match: /(?=\S.*/)
      scope: punctuation.definition.string.begin.sql
      push: inside-regexp

  inside-regexp:
    - meta_include_prototype: false
    - meta_scope: meta.string.regexp.sql string.regexp.sql
    - match: /
      scope: punctuation.definition.string.end.sql
      pop: 1
    - include: string-interpolations
    - match: \\/
      scope: constant.character.escape.slash.sql

  strings:
    - meta_append: true
    - include: double-quoted-strings
    - include: interpolations

  double-quoted-strings:
    - match: \"
      scope: punctuation.definition.string.begin.sql
      push: inside-double-quoted-string

  inside-double-quoted-string:
    - meta_include_prototype: false
    - meta_scope: meta.string.sql string.quoted.double.sql
    - match: \"\"
      scope: constant.character.escape.sql
    - match: \"
      scope: punctuation.definition.string.end.sql
      pop: 1
    - include: string-interpolations

  interpolations:
    - match: \%\{
      scope: punctuation.definition.string.begin.sql
      push: inside-interpolation

  inside-interpolation:
    - meta_include_prototype: false
    - meta_scope: meta.string.sql string.other.quoted.brackets.sql
    - match: \}
      scope: punctuation.definition.string.end.sql
      pop: 1
    - include: string-interpolations

  string-interpolations:
    - meta_include_prototype: false
    - match: (#\{)([^\}]*)(\})
      scope: meta.interpolation.sql
      captures:
        1: punctuation.section.interpolation.begin.sql
        3: punctuation.section.interpolation.end.sql
      push: clear-scope-imediately-pop

###[ OPERATORS ]###############################################################

  operators:
    - meta_append: true
    - match: \|\|
      scope: keyword.operator.concatenation.sql

###[ PROTOTYPES ]##############################################################

  clear-scope-imediately-pop:
    - clear_scopes: 1
    - include: immediately-pop
