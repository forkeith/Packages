%YAML 1.2
---
name: SQL (Basic)
scope: source.sql.basic
hidden: true
version: 2

variables:
  string_escape: (?:\\.)
  simple_identifier: (?:\w+)
  dml_targets: (?i:aggregate|conversion|database|domain|function|group|((?:fulltext|spatial|unique)\s+)?index|language|operator class|operator|procedure|rule|schema|sequence|table(?:space)?|trigger|type|user|view)
  reserved: (?i:\b(?:from|order|group|select|where|inner|outer|left|right|join|on|set|;|with)\b)

contexts:
  prototype:
    - include: comments

  main:
    - include: statements
    - include: types
    - include: expressions
    - match: ','
      scope: punctuation.separator.sequence.sql
    - match: ';'
      scope: punctuation.terminator.statement.sql

  comments:
    - meta_include_prototype: false
    - include: double-dash-comments
    - include: block-comments

  double-dash-comments:
    - meta_include_prototype: false
    - match: '--'
      scope: punctuation.definition.comment.sql
      push: inside-double-dash-comment

  block-comments:
    - meta_include_prototype: false
    - match: /\*
      scope: punctuation.definition.comment.begin.sql
      push: inside-comment-block

  inside-double-dash-comment:
    - meta_include_prototype: false
    - meta_scope: comment.line.double-dash.sql
    - match: \n
      pop: true

  inside-comment-block:
    - meta_include_prototype: false
    - meta_scope: comment.block.sql
    - match: \*/
      scope: punctuation.definition.comment.end.sql
      pop: true
    - match: ^\s*(\*)(?!/)
      captures:
        1: punctuation.definition.comment.sql

  string-escape:
    - meta_include_prototype: false
    - match: '{{string_escape}}'
      scope: constant.character.escape.sql

  strings:
    - match: \'
      scope: punctuation.definition.string.begin.sql
      push: single-quoted-string

  single-quoted-string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.single.sql
    - match: (?:'')
      scope: constant.character.escape.sql
    - match: \'
      scope: punctuation.definition.string.end.sql
      pop: true
    - include: string-escape

  identifier-create:
    - meta_scope: meta.toc-list.full-identifier.sql entity.name.function.sql
    - include: identifier

  single-identifier-after-whitespace:
    - match: \s+
      set: single-identifier
    - match: ''
      set: single-identifier

  single-identifier:
    - include: identifier
    - match: ''
      pop: true

  identifier:
    - include: simple-identifier
    - include: single-quoted-identifier
    - include: double-quoted-identifier
    - include: backtick-quoted-identifier
    - match: \.
      scope: punctuation.accessor.dot.sql
    - match: (?=\S|\s*\()
      pop: true

  simple-identifier:
    - match: '{{simple_identifier}}(?=\s*\.)'
    - match: '{{simple_identifier}}'
      pop: true

  single-quoted-identifier:
    - match: (')([^']+)(')
      captures:
        1: punctuation.definition.identifier.begin.sql
        3: punctuation.definition.identifier.end.sql

  double-quoted-identifier:
    - match: (")([^"]+)(")
      captures:
        1: punctuation.definition.identifier.begin.sql
        3: punctuation.definition.identifier.end.sql

  backtick-quoted-identifier:
    - match: (`)([^`]+)(`)
      captures:
        1: punctuation.definition.identifier.begin.sql
        3: punctuation.definition.identifier.end.sql

  create-condition:
    - include: dml-condition
    - match: (?=\S)
      set: identifier-create

  drop-condition:
    - include: dml-condition
    - match: (?=\S)
      set: single-identifier-after-whitespace

  dml-condition:
    - match: (?i:\b(if)\b)
      scope: keyword.control.flow.sql
    - include: logical-operators

  logical-operators:
    - match: (?i:\b(and|or|having|exists|between|in|not|is)\b)
      scope: keyword.operator.logical.sql

  operators:
    - match: '<=>|[!<>]?=|<>|<|>'
      scope: keyword.operator.comparison.sql
    - match: '-|\+|/'
      scope: keyword.operator.arithmetic.sql
    - include: logical-operators

  types:
    - match: \b(?i:bit|bool|boolean|datetime|int)\b
      scope: storage.type.sql
    - match: \b(?i:char|number|nvarchar|varbinary|varchar)\b(?:\s*\((\d+)\))?
      scope: storage.type.sql
      captures:
        1: constant.numeric.sql

  expressions:
    - match: (?i)\bas\b
      scope: keyword.operator.assignment.alias.sql
      push: [column-alias, single-identifier-after-whitespace]
    - match: \b\d+\b
      scope: meta.number.integer.decimal.sql constant.numeric.value.sql
    - match: (?i)\b(?:true|false)\b
      scope: constant.language.boolean.sql
    - match: (?i:\bnull\b)
      scope: constant.language.null.sql
    - match: \*
      scope: variable.language.wildcard.asterisk.sql
    - include: strings
    - include: operators
    - include: built-in-aggregate-function-calls
    - include: built-in-scalar-function-calls
    - include: user-defined-function-calls
    - match: \(
      scope: punctuation.section.group.begin.sql
      push: inside-group
    - match: \)
      scope: invalid.illegal.trailing-paren.sql

  built-in-aggregate-function-calls:
    # List of SQL99 built-in functions from http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html
    - match: (?i)\b(?:AVG|COUNT|MIN|MAX|SUM)(?=\s*\()
      scope: support.function.aggregate.sql
      push: begin-method-call-paren

  built-in-scalar-function-calls:
    # List of SQL99 built-in functions from http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html
    - match: (?i)\b(CURRENT_(DATE|TIME(STAMP)?|USER)|(SESSION|SYSTEM)_USER)\b
      scope: support.function.scalar.sql

  user-defined-function-calls:
    - match: \b\w+(?=\s*\()
      scope: support.function.sql
      push: begin-method-call-paren

  begin-method-call-paren:
    - meta_include_prototype: false
    - meta_scope: meta.function-call.sql
    - match: \(
      scope: meta.group.sql punctuation.section.parens.begin.sql
      set: inside-method-call
    - match: (?=\S)
      pop: true

  inside-method-call:
    - meta_content_scope: meta.function-call.sql meta.group.sql
    - match: \)
      scope: meta.function-call.sql meta.group.sql punctuation.section.parens.end.sql
      pop: true
    - match: ','
      scope: punctuation.separator.argument.sql
    - include: expressions

  inside-group:
    - meta_scope: meta.group.sql
    - match: \)
      scope: punctuation.section.group.end.sql
      pop: true
    - include: main

  statements:
    - include: ddl-statements
    - include: dml-statements

  ddl-statements:
    - match: \b(?i:create(?:\s+or\s+replace)?)\b
      scope: keyword.other.ddl.sql
      push: ddl-create-target
    - match: (?i:\bdrop\s+table\b)
      scope: keyword.other.ddl.sql
      push: ddl-drop-table
    - match: \b(?i:drop)\b
      scope: keyword.other.ddl.sql
      push: ddl-drop-target
    - match: \b(?i:alter\s+table)\b
      scope: keyword.other.ddl.sql
      push: [ddl-alter-table, table-name, single-identifier-after-whitespace]
    - match: \b(?i:alter)\b
      scope: keyword.other.ddl.sql
      push: ddl-alter-target
    - match: (?i:\b(((?:foreign|fulltext|primary|unique)\s+)?key|references|on\sdelete(\s+cascade)?|on\supdate(\s+cascade)?|check|constraint|default)\b)
      scope: storage.modifier.sql
    - match: (?i:\b(grant(\swith\sgrant\soption)?|revoke)\b)
      scope: keyword.other.authorization.sql

  ddl-create-target:
    - meta_scope: meta.create.sql
    - match: |-
        (?xi)
        ({{dml_targets}})\b\s*
        (on)?\b
      captures:
        1: keyword.other.sql
      set: create-condition
    - match: (?=\S)
      pop: true

  ddl-drop-target:
    - meta_scope: meta.drop.sql
    - match: |-
        (?xi)
        \b{{dml_targets}}\b
      captures:
        1: keyword.other.sql
      set: drop-condition
    - match: (?=\S)
      set: drop-condition

  ddl-drop-table:
    - meta_scope: meta.drop.sql
    - include: dml-condition
    - match: (?=\S)
      set: [table-name, single-identifier-after-whitespace]

  ddl-alter-table:
    - meta_scope: meta.alter.sql
    - match: \b(?i:add(?:\s+column)?|alter\s+column)\b
      scope: keyword.other.ddl.sql
      push: [column-alias, single-identifier-after-whitespace]
    - include: expressions
    - include: ddl-alter-common
    - match: (?=\S)
      pop: true

  ddl-alter-target:
    - meta_scope: meta.alter.sql
    - include: ddl-alter-common
    - match: (?=\S)
      pop: true

  ddl-alter-common:
    - match: (?i:\s*\b(add)\s+(constraint|(?:fulltext|spatial)\s+(index|key)|index))
      scope: meta.add.sql
      captures:
        1: keyword.other.add.sql
        2: keyword.other.sql

  dml-statements:
    - match: (?i:\bselect\b)
      scope: keyword.other.DML.sql
    - match: (?i:\bunion(?:\s+all)?\b)
      scope: keyword.other.DML.sql
    - match: (?i:\b(?:insert\s+into|update|delete(?:\s+from)?|truncate)\b)
      scope: keyword.other.DML.sql
      push: [table-name, single-identifier-after-whitespace]
    - match: (?i:\bset\b)
      scope: keyword.other.DML.sql
      push: set
    - match: (?i:\bvalues\b)
      scope: keyword.other.DML.II.sql
    - include: joins
    - match: \b(?i:distinct)\b
      scope: keyword.other.DML.sql
    - match: \b(?i:group\s+by|order\s+by|having|where)\b
      scope: keyword.other.DML.sql
    - match: \b(?i:from)\b
      scope: keyword.other.DML.sql
      push: maybe-subquery
    - match: (?i)\b(asc|desc)\b
      scope: keyword.other.order.sql

  joins:
    - match: (?i)\b(?:inner|(?:full\s+)?outer|cross|left|right)\s+join\b
      scope: keyword.other.DML.sql
      push: [join-on, maybe-subquery]

  column-alias:
    - meta_content_scope: meta.column-name.sql constant.other.placeholder.sql
    - match: ''
      pop: true

  database-name:
    - meta_content_scope: meta.database-name.sql constant.other.placeholder.sql
    - match: ''
      pop: true

  table-name:
    - meta_content_scope: meta.table-name.sql constant.other.placeholder.sql
    - match: ''
      pop: true

  maybe-subquery:
    - match: \(
      scope: punctuation.section.group.begin.sql
      set: [table-alias, inside-group]
    - match: (?=\S)
      set: [table-alias, table-name, single-identifier]

  table-alias:
    - match: \b(?i:as)\b
      scope: keyword.operator.assignment.alias.sql
    - match: (?={{reserved}})
      pop: true
    - match: (?=\S)
      set: [after-table-alias, table-name, single-identifier]

  after-table-alias:
    - match: (?=\S)
      pop: true

  join-on:
    - match: (?i)\bon\b
      scope: keyword.operator.join.sql
      push: [join-operators, column-alias, single-identifier-after-whitespace]
    - match: (?=\S)
      pop: true

  join-operators:
    - include: operators
    - match: (?=\S)
      set: [column-alias, single-identifier-after-whitespace]

  set:
    - match: (?=\S)
      pop: true
