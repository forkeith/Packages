%YAML 1.2
---
name: SQL (Basic)
scope: source.sql.basic
hidden: true
version: 2

variables:
  string_escape: (?:\\.)
  dml_targets: (?:aggregate|conversion|database|domain|function|group|((?:fulltext|spatial|unique)\s+)?index|language|operator class|operator|procedure|rule|schema|sequence|table(?:space)?|trigger|type|user|view)

contexts:
  prototype:
    - include: comments

  main:
    - include: statements
    - include: types
    - match: (?i:\s*\b(comment\s+on\s+(table|column|aggregate|constraint|database|domain|function|index|operator|rule|schema|sequence|trigger|type|view))\s+.*?\s+(is)\s+)
      scope: keyword.other.object-comments.sql
    - match: (?i)\bon\b
      scope: keyword.operator.join.sql
    - match: (?i)\b(asc|desc)\b
      scope: keyword.other.order.sql
    - match: \*
      scope: variable.language.wildcard.asterisk.sql
    - include: expressions
    - match: ','
      scope: punctuation.separator.sequence.sql
    - match: ';'
      scope: punctuation.terminator.statement.sql

  comments:
    - meta_include_prototype: false
    - include: double-dash-comments
    - include: block-comments

  double-dash-comments:
    - meta_include_prototype: false
    - match: '--'
      scope: punctuation.definition.comment.sql
      push: inside-double-dash-comment

  block-comments:
    - meta_include_prototype: false
    - match: /\*
      scope: punctuation.definition.comment.begin.sql
      push: inside-comment-block

  inside-double-dash-comment:
    - meta_include_prototype: false
    - meta_scope: comment.line.double-dash.sql
    - match: \n
      pop: true

  inside-comment-block:
    - meta_include_prototype: false
    - meta_scope: comment.block.sql
    - match: \*/
      scope: punctuation.definition.comment.end.sql
      pop: true
    - match: ^\s*(\*)(?!/)
      captures:
        1: punctuation.definition.comment.sql

  string-escape:
    - meta_include_prototype: false
    - match: '{{string_escape}}'
      scope: constant.character.escape.sql

  strings:
    - match: \'
      scope: punctuation.definition.string.begin.sql
      push: single-quoted-string

  single-quoted-string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.single.sql
    - match: (?:'')
      scope: constant.character.escape.sql
    - match: \'
      scope: punctuation.definition.string.end.sql
      pop: true
    - include: string-escape

  identifier-create:
    - meta_scope: meta.toc-list.full-identifier.sql entity.name.function.sql
    - include: identifier

  single-identifier-after-whitespace:
    - match: \s+
      set: single-identifier
    - match: ''
      set: single-identifier

  single-identifier:
    - include: identifier
    - match: ''
      pop: true

  identifier:
    - include: simple-identifier
    - include: single-quoted-identifier
    - include: double-quoted-identifier
    - include: backtick-quoted-identifier
    - match: \.
      scope: punctuation.accessor.dot.sql
    - match: (?=\S|\s*\()
      pop: true

  simple-identifier:
    - match: \w+(?=\s*\.)
    - match: \w+
      pop: true

  single-quoted-identifier:
    - match: (')([^']+)(')
      captures:
        1: punctuation.definition.identifier.begin.sql
        3: punctuation.definition.identifier.end.sql

  double-quoted-identifier:
    - match: (")([^"]+)(")
      captures:
        1: punctuation.definition.identifier.begin.sql
        3: punctuation.definition.identifier.end.sql

  backtick-quoted-identifier:
    - match: (`)([^`]+)(`)
      captures:
        1: punctuation.definition.identifier.begin.sql
        3: punctuation.definition.identifier.end.sql

  create-condition:
    - include: dml-condition
    - match: (?=\S)
      set: identifier-create

  drop-condition:
    - include: dml-condition
    - match: (?=\S)
      pop: true

  dml-condition:
    - match: (?i:\b(if)\b)
      scope: keyword.control.flow.sql
    - include: logical-operators

  logical-operators:
    - match: (?i:\b(and|or|having|exists|between|in|not|is)\b)
      scope: keyword.operator.logical.sql

  operators:
    - match: '<=>|[!<>]?=|<>|<|>'
      scope: keyword.operator.comparison.sql
    - match: '-|\+|/'
      scope: keyword.operator.arithmetic.sql
    - include: logical-operators

  types:
    - match: \b(?i:bit|bool|boolean|datetime|int)\b
      scope: storage.type.sql
    - match: \b(?i:char|number|nvarchar|varbinary|varchar)\b(?:\s*\((\d+)\))?
      scope: storage.type.sql
      captures:
        1: constant.numeric.sql

  expressions:
    - match: (?i)\bas\b
      scope: keyword.operator.assignment.alias.sql
    - match: \b\d+\b
      scope: meta.number.integer.decimal.sql constant.numeric.value.sql
    - match: (?i)\b(?:true|false)\b
      scope: constant.language.boolean.sql
    - match: (?i:\bnull\b)
      scope: constant.language.null.sql
    - include: strings
    - include: operators
    - include: built-in-aggregate-function-calls
    - include: built-in-scalar-function-calls
    - include: user-defined-function-calls
    - match: \(
      scope: punctuation.section.group.begin.sql
      push: inside-group
    - match: \)
      scope: invalid.illegal.trailing-paren.sql

  built-in-aggregate-function-calls:
    # List of SQL99 built-in functions from http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html
    - match: (?i)\b(?:AVG|COUNT|MIN|MAX|SUM)(?=\s*\()
      scope: support.function.aggregate.sql
      push: inside-method-call

  built-in-scalar-function-calls:
    # List of SQL99 built-in functions from http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html
    - match: (?i)\b(CURRENT_(DATE|TIME(STAMP)?|USER)|(SESSION|SYSTEM)_USER)\b
      scope: support.function.scalar.sql

  user-defined-function-calls:
    - match: \b\w+(?=\s*\()
      scope: support.function.sql
      push: begin-method-call-paren

  begin-method-call-paren:
    - meta_include_prototype: false
    - meta_scope: meta.function-call.sql
    - match: \(
      scope: meta.group.sql punctuation.section.parens.begin.sql
      set: inside-method-call
    - match: (?=\S)
      pop: true

  inside-method-call:
    - meta_content_scope: meta.function-call.sql meta.group.sql
    - match: \)
      scope: meta.function-call.sql meta.group.sql punctuation.section.parens.end.sql
      pop: true
    - match: ','
      scope: punctuation.separator.argument.sql
    - include: expressions

  inside-group:
    - meta_scope: meta.group.sql
    - match: \)
      scope: punctuation.section.group.end.sql
      pop: true
    - include: main

  statements:
    - include: ddl-statements
    - include: dml-statements

  ddl-statements:
    - match: |-
        (?xi)
        \b(create(?:\s+or\s+replace)?)\s+
        ({{dml_targets}})
        \b\s*
        (on)?\b
      scope: meta.create.sql
      captures:
        1: keyword.other.create.sql
        2: keyword.other.sql
        3: keyword.other.sql
      push: create-condition
    - match: (?i:\s*\b(drop)\s+({{dml_targets}}))
      scope: meta.drop.sql
      captures:
        1: keyword.other.create.sql
        2: keyword.other.sql
      push: drop-condition
    - match: (?i:\s*(drop)\s+(table)\s+(\w+)(\s+cascade)?\b)
      scope: meta.drop.sql
      captures:
        1: keyword.other.create.sql
        2: keyword.other.table.sql
        3: entity.name.function.sql
        4: keyword.other.cascade.sql
    - match: (?i:\s*\b(alter)\s+({{dml_targets}})\s+)
      scope: meta.alter.sql
      captures:
        1: keyword.other.create.sql
        2: keyword.other.table.sql
    - match: (?i:\s*\b(add)\s+(column|constraint|fulltext\s+(index|key)|index|spatial\s+(index|key)))
      scope: meta.add.sql
      captures:
        1: keyword.other.add.sql
        2: keyword.other.sql
    - match: (?i:\b(((?:foreign|fulltext|primary|unique)\s+)?key|references|on\sdelete(\s+cascade)?|on\supdate(\s+cascade)?|check|constraint|default)\b)
      scope: storage.modifier.sql
    - match: (?i:\b(grant(\swith\sgrant\soption)?|revoke)\b)
      scope: keyword.other.authorization.sql

  dml-statements:
    - match: (?i:\bselect\b)
      scope: keyword.other.DML.sql
    - match: (?i:\bunion(?:\s+all)?\b)
      scope: keyword.other.DML.sql
    - match: (?i:\b(?:insert(\s+(?:ignore\s+)?into)?|update|delete|truncate)\b)
      scope: keyword.other.DML.sql
      push: single-identifier
    - match: (?i:\b(?:set|with)\b)
      scope: keyword.other.DML.sql
    - match: (?i:\bvalues\b)
      scope: keyword.other.DML.II.sql
    - include: joins
    - match: \b(?i:distinct)\b
      scope: keyword.other.DML.sql
    - match: \b(?i:group\s+by|order\s+by|having|where)\b
      scope: keyword.other.DML.sql
    - match: \b(?i:from)\b
      scope: keyword.other.DML.sql

  joins:
    - match: (?i)\b(?:inner|(?:full\s+)?outer|cross|left|right)\s+join\b
      scope: keyword.other.DML.sql
