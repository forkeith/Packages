%YAML 1.2
---
name: T-SQL
scope: source.sql.tsql
version: 2
extends: Packages/SQL/SQL (basic).sublime-syntax

variables:
  string_escape: (?:'') #(?:\\[tnr])
  simple_identifier: (?:#?\w+)
contexts:
  identifier:
    - meta_prepend: true
    - include: square-bracketed-identifier

  square-bracketed-identifier:
    - match: (\[)([^]]+)(\])
      captures:
        1: punctuation.definition.identifier.begin.sql
        3: punctuation.definition.identifier.end.sql

  strings:
    - meta_append: true
    - match: N'
      scope: punctuation.definition.string.begin.sql
      push: single-quoted-string

  operators:
    - meta_append: true
    - match: (?i:\blike\b)
      scope: keyword.operator.logical.sql
      branch_point: like-strings-branch
      branch:
        - like-string-not-followed-by-escape
        - like-string-followed-by-escape-slash
        - like-string-followed-by-escape-caret
        - like-string-followed-by-unknown-escape

  variables:
    - match: (@)\w+
      scope: variable.other.readwrite.sql
      captures:
        1: punctuation.definition.variable.sql
    - match: |-
        (?xi)(@@)
        (?:cursor_rows|connections|cpu_busy|datefirst|dbts|error|fetch_status|identity|idle|io_busy|langid|language|lock_timeout|
          max_connections|max_precision|nestlevel|options|packet_errors|pack_received|pack_sent|procid|remserver|rowcount|
          servername|servicename|spid|textsize|timeticks|total_errors|total_read|total_write|trancount|version)\b
      scope: support.variable.global.sql
      captures:
        1: punctuation.definition.variable.sql

  like-string-not-followed-by-escape:
    - match: \'
      scope: punctuation.definition.string.begin.sql
      set: [like-escape-fail, inside-like-single-quoted-string]
    - match: (?=\S)
      pop: true

  like-string-followed-by-escape-slash:
    - match: \'
      scope: punctuation.definition.string.begin.sql
      set: [like-escape-character-slash, like-escape-pop, inside-like-single-quoted-string-slash-escape]
    - match: (?=\S)
      pop: true

  like-string-followed-by-escape-caret:
    - match: \'
      scope: punctuation.definition.string.begin.sql
      set: [like-escape-character-caret, like-escape-pop, inside-like-single-quoted-string-caret-escape]
    - match: (?=\S)
      pop: true

  like-string-followed-by-unknown-escape:
    - match: \'
      scope: punctuation.definition.string.begin.sql
      set: [like-escape-character-any, like-escape-pop, inside-like-single-quoted-string]
    - match: (?=\S)
      pop: true

  inside-like-single-quoted-string-slash-escape:
    - meta_include_prototype: false
    - meta_scope: meta.string.like.sql string.quoted.single.sql
    - match: \\.
      scope: constant.character.escape.sql
    - include: inside-like-single-quoted-string

  inside-like-single-quoted-string-caret-escape:
    - meta_include_prototype: false
    - meta_scope: meta.string.like.sql string.quoted.single.sql
    - match: \^.
      scope: constant.character.escape.sql
    - include: inside-like-single-quoted-string

  inside-like-single-quoted-string:
    - meta_include_prototype: false
    - meta_scope: meta.string.like.sql string.quoted.single.sql
    - match: \'
      scope: punctuation.definition.string.end.sql
      pop: true
    - match: |-
        (?x)
        (\[)(\^)?
        (?:.|[^]'-]+?)
        (?:(-)[^]'-]*)?
        (\])
      scope: meta.set.like.sql
      captures:
        1: keyword.control.set.begin.sql
        2: keyword.control.set.negation.sql
        3: constant.other.range.sql
        4: keyword.control.set.end.sql
    - match: '[%_]'
      scope: keyword.operator.wildcard.sql

  like-escape-fail:
    - match: (?i:\bescape\b)
      fail: like-strings-branch
    - match: (?=\S)
      pop: true

  like-escape-pop:
    - match: (?i:\bescape\b)
      scope: keyword.operator.word.sql
      pop: true
    - match: (?=\S)
      pop: true

  like-escape-character-any:
    - match: (\')([^'])(\')
      scope: meta.string.escape.sql string.quoted.single.sql
      captures:
        1: punctuation.definition.string.begin.sql
        2: constant.character.escape.sql
        3: punctuation.definition.string.end.sql
      pop: true
    - match: (?=\S)
      pop: true

  like-escape-character-caret:
    - match: (\')(\^)(\')
      scope: meta.string.escape.sql string.quoted.single.sql
      captures:
        1: punctuation.definition.string.begin.sql
        2: constant.character.escape.sql
        3: punctuation.definition.string.end.sql
      pop: true
    - match: (?=\S)
      fail: like-strings-branch

  like-escape-character-slash:
    - match: (\')(\\)(\')
      scope: meta.string.escape.sql string.quoted.single.sql
      captures:
        1: punctuation.definition.string.begin.sql
        2: constant.character.escape.sql
        3: punctuation.definition.string.end.sql
      pop: true
    - match: (?=\S)
      fail: like-strings-branch

  types:
    - meta_append: true
    - match: (?i:\b(?:smallint|sysname)\b)
      scope: storage.type.sql

  statements:
    - meta_append: true
    - include: declarations
    - include: transaction-statements
    - match: \b(?i:go)\b
      scope: keyword.control.flow.tsql
    - match: \b(?i:if|else|return|while)\b
      scope: keyword.control.flow.tsql
    - match: \b(?i:goto)\b
      scope: keyword.control.flow.tsql
    - match: \b(?i:exec)\b
      scope: keyword.control.flow.tsql
    - match: \b(?i:begin)\b
      scope: keyword.control.flow.begin.tsql
    - match: \b(?i:end)\b
      scope: keyword.control.flow.end.tsql
    - match: \b(?i:print)\b
      scope: keyword.other.tsql
    - match: \b(?i:use)\b
      scope: keyword.context.tsql
      push: [database-name, single-identifier-after-whitespace]
    - match: \b(\w+)(:)
      captures:
        1: entity.name.label.tsql
        2: punctuation.definition.label.tsql

  transaction-statements:
    - match: (?i)\b(?:begin|commit|rollback|save)\s+tran(saction)?\b
      scope: keyword.context.tsql

  declarations:
    - match: \b(?i:declare)\b
      scope: keyword.declaration.variable.tsql

  expressions:
    - meta_prepend: true
    - include: types
    - match: \b(?i:case)\b
      scope: keyword.control.conditional.case.sql
      push: inside-case-expression
    - include: variables
    - match: \b(?i:output|nowait|cursor\s+for|open|fetch\s+next|close|deallocate)\b
      scope: keyword.other.sql


  inside-case-expression:
    - meta_scope: meta.statement.conditional.case.sql
    - match: \b(?i:end)\b
      scope: keyword.control.conditional.end.sql
      pop: true
    - match: \b(?i)(case)\s+(when)\b
      captures:
        1: keyword.control.conditional.case.sql
        2: keyword.control.conditional.when.sql
    - match: \b(?i:when)\b
      scope: keyword.control.conditional.when.sql
    - match: \b(?i:then)\b
      scope: keyword.control.conditional.then.sql
    - match: \b(?i:else)\b
      scope: keyword.control.conditional.else.sql
    - include: main

  dml-statements:
    - meta_append: true
    - match: \b(?i:bulk)\b
      scope: keyword.other.tsql
    - match: \b(?i:into)\b
      scope: keyword.other.tsql
    - match: \b(?i:off)\b
      scope: keyword.other.tsql
    - match: \b(?i:for\s+xml\s+path)\b
      scope: keyword.other.tsql
    - match: \b(?i:top)\b
      scope: keyword.other.DML.tsql

  built-in-scalar-function-calls:
    - meta_append: true
    - match: (?i)\b(?:CONVERT|GETDATE)(?=\s*\()
      scope: support.function.scalar.sql
      push: begin-method-call-paren
