%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: ASP
file_extensions:
  - asa # asp is handled by HTML-ASP.sublime-syntax
scope: source.asp
variables:
  apostrophe_comment_begin: "'"
  rem_comment_begin: '\b(?i:REM)\b'
  whitespace_or_end_of_statement: (?=\s+|$|:|{{apostrophe_comment_begin}}|{{rem_comment_begin}})
  identifier: '[a-zA-Z]\w*|\[[^\]\n]*\]' # reserved words can be used if enclosed in square brackets, as can other characters not normally accepted
  literal_number: '&[hH]\h+&?|\b(?:(?:(?:(?:[0-9]+\.?[0-9]*)|(?:\.[0-9]+))(?i:e[+-]?[0-9]+)?)(?i:(?:u?l?)|f)?)\b'
  reserved_words: '\b(?i:Class|Sub|Function|Const|Dim|ReDim|Public|Private|End|Preserve|Select|Case|If|Else|ElseIf|Then|For|Each|Next|ByRef|ByVal|Set|Call|New|Option|With|To|In|While|Wend|Until|Loop|On|GoTo|Resume|Let|Get|Exit|Do)\b' # Default|Step|Error|Property are not reserved words
  keywords: '\b(?i:Empty|False|Nothing|Null|True)\b'
  constants: '\b(?i:vbTrue|vbFalse|vbCr|vbCrLf|vbFormFeed|vbLf|vbNewLine|vbNullChar|vbNullString|vbTab|vbVerticalTab|vbBinaryCompare|vbTextCompare|vbSunday|vbMonday|vbTuesday|vbWednesday|vbThursday|vbFriday|vbSaturday|vbUseSystemDayOfWeek|vbFirstJan1|vbFirstFourDays|vbFirstFullWeek|vbGeneralDate|vbLongDate|vbShortDate|vbLongTime|vbShortTime|vbObjectError|vbEmpty|vbNull|vbInteger|vbLong|vbSingle|vbDouble|vbCurrency|vbDate|vbString|vbObject|vbError|vbBoolean|vbVariant|vbDataObject|vbDecimal|vbByte|vbArray|vbOkCancel|vbOkOnly|vbYesNo|vbYesNoCancel|vbAbortRetryIgnore|vbRetryCancel|vbYes|vbNo|vbAbort|vbCancel|vbIgnore|vbRetry|vbCritical|vbExclamation|vbInformation|vbQuestion|vbDefaultButton[123]|Randomize)\b'
  functions: '\b(?i:Array|Add|Asc|Atn|CBool|CByte|CCur|CDate|CDbl|Chr|CInt|CLng|Conversions|Cos|CreateObject|CSng|CStr|Date|DateAdd|DateDiff|DatePart|DateSerial|DateValue|Day|Derived|Math|Escape|Eval|Exists|Exp|Filter|FormatCurrency|FormatDateTime|FormatNumber|FormatPercent|GetLocale|GetObject|GetRef|Hex|Hour|InputBox|InStr|InStrRev|Int|Fix|IsArray|IsDate|IsEmpty|IsNull|IsNumeric|IsObject|Item|Items|Join|Keys|LBound|LCase|Left|Len|LoadPicture|Log|LTrim|RTrim|Trim|Maths|Mid|Minute|Month|MonthName|MsgBox|Now|Oct|Remove|RemoveAll|Replace|RGB|Right|Rnd|Round|ScriptEngine|ScriptEngineBuildVersion|ScriptEngineMajorVersion|ScriptEngineMinorVersion|Second|SetLocale|Sgn|Sin|Space|Split|Sqr|StrComp|String|StrReverse|Tan|Time|Timer|TimeSerial|TimeValue|TypeName|UBound|UCase|Unescape|VarType|Weekday|WeekdayName|Year)\b'
  asp_builtin_classes: '\b(?i:Application|ObjectContext|Request|Response|Server|Session)\b'
  #asp_builtin_funcs: '\b(?i:Lock|Unlock|SetAbort|SetComplete|BinaryRead|AddHeader|AppendToLog|BinaryWrite|Clear|Flush|Redirect|Write|HTMLEncode|MapPath|URLEncode|Abandon)\b'
  asp_builtin_events: '\b(?i:Application_OnEnd|Application_OnStart|OnTransactionAbort|OnTransactionCommit|Session_OnEnd|Session_OnStart|Class_Initialize|Class_Terminate)\b'
  #asp_builtin_consts: '\b(?i:TotalBytes|Buffer|CacheControl|Charset|ContentType|Expires|ExpiresAbsolute|IsClientConnected|PICS|Status|ScriptTimeout|CodePage|LCID|SessionID|Timeout)\b'
  asp_builtin_collections: '\b(?i:Contents|StaticObjects|ClientCertificate|Cookies|Form|QueryString|ServerVariables)\b'
  
  # Session       : https://msdn.microsoft.com/en-us/library/ms524319%28v=vs.90%29.aspx
  # Server        : https://msdn.microsoft.com/en-us/library/ms525541%28v=vs.90%29.aspx
  # ObjectContext : https://msdn.microsoft.com/en-us/library/ms525667%28v=vs.90%29.aspx
  # Application   : https://msdn.microsoft.com/en-us/library/ms525360%28v=vs.90%29.aspx

contexts:
  main:
    - match: '\b(?i:End){{whitespace_or_end_of_statement}}'
      scope: invalid.illegal.unexpected-token.asp
    - match: '(?i:Option\s+Explicit)'
      scope: keyword.asp
    - include: definitions
    - include: statements

  comments:
    - match: '{{apostrophe_comment_begin}}'
      scope: punctuation.definition.comment.asp
      push:
        - meta_scope: comment.line.apostrophe.asp
        - match: \n
          pop: true
    - match: '{{rem_comment_begin}}'
      scope: punctuation.definition.comment.asp
      push:
        - meta_scope: comment.line.rem.asp
        - match: \n
          pop: true

  line_continuation_char:
    - match: '\b_'
      scope: keyword.operator.line-continuation.asp
      push:
        - match: '\S.*'
          scope: invalid.illegal.expected-end-of-line.asp
        - match: $
          set:
            - match: '(?=\S)' # for VBS, use ^, but ASP allows multiple whitespace-only lines after the _, so we use (?=\S)
              pop: true

  allow_line_continuation:
    - match: '[\t ]+'
      scope: ''
    - include: line_continuation_char
    - include: comments

  not_end_of_statement:
    - match: ':'
      scope: invalid.illegal.unexpected-end-of-statement.asp
      pop: true
    - match: \n
      scope: invalid.illegal.unexpected-end-of-statement.asp
      pop: true
    - match: '{{rem_comment_begin}}|{{apostrophe_comment_begin}}'
      set:
        - meta_scope: invalid.illegal.unexpected-end-of-statement.asp
        - match: \n
          pop: true
    - include: allow_line_continuation

  expect_not_end_of_statement:
    - include: not_end_of_statement
    - match: '\s*(?=\S)'
      pop: true

  inside_string:
    - meta_scope: string.quoted.double.asp
    - match: \n
      scope: invalid.illegal.unclosed-string.asp
      pop: true
    - match: '""'
      scope: constant.character.escape.apostrophe.asp
    - match: '"'
      scope: punctuation.definition.string.end.asp
      pop: true

  illegal_names:
    - match: '{{keywords}}|{{constants}}|{{reserved_words}}|{{functions}}|{{asp_builtin_classes}}'
      scope: invalid.illegal.name.asp
      pop: true

  allow_statement_separator:
    - match: ':'
      scope: keyword.operator.statement-separator.asp
      pop: true

  unexpected_token:
    - match: \n
      scope: invalid.illegal.missing-token.asp
      pop: true
    - match: '\S+'
      scope: invalid.illegal.unexpected-token.asp
      pop: true

  statements:
    - include: variable_definitions
    - include: allow_line_continuation
    - match: '\b(?i:On\s+Error\s+)'
      scope: storage.type.asp
      push:
        - include: not_end_of_statement
        - match: '\b(?i:Resume\s+Next){{whitespace_or_end_of_statement}}'
          scope: storage.type.asp
          pop: true
        - match: '\b(?i:Goto\s+0){{whitespace_or_end_of_statement}}'
          scope: storage.type.asp
          pop: true
        - include: unexpected_token
    - match: '\b(?i:Call|Set){{whitespace_or_end_of_statement}}'
      scope: storage.type.asp # maybe this should be a keyword instead?
      push: expect_not_end_of_statement
    - match: '\b(?i:Exit\s+(?:Sub|Function|Property|For|Do)){{whitespace_or_end_of_statement}}'
      scope: keyword.control.flow.asp
    - include: control_flow
    - include: literals

  definitions:
    - include: class_definitions
    - include: method_definitions
    - include: variable_definitions

  class_definitions:
    - match: '\b(?i:Class)\s'
      scope: storage.type.asp
      push: [inside_class, class_name]

  class_name:
    - meta_scope: meta.class.source.asp meta.class.identifier.source.asp
    - include: allow_line_continuation
    - include: illegal_names
    - match: '{{identifier}}'
      scope: entity.name.class.source.asp
      pop: true
    - include: unexpected_token

  inside_class:
    - meta_content_scope: meta.class.source.asp meta.class.body.source.asp
    - match: '\b(?i:End){{whitespace_or_end_of_statement}}'
      set:
        - meta_scope: meta.class.source.asp meta.class.body.source.asp storage.type.class.end.asp
        - include: allow_line_continuation
        - match: '\b(?i:Class){{whitespace_or_end_of_statement}}'
          #scope: meta.class.source.asp meta.class.body.source.asp
          pop: true
        - include: unexpected_token
    - include: method_definitions
    - match: '\b(?:(?i:Public(\s+Default)?|Private)\s+)?(?i:Property){{whitespace_or_end_of_statement}}'
      scope: storage.type.function.asp
      push:
        - meta_scope: meta.method.source.asp meta.method.identifier.source.asp storage.type.function.asp
        - include: not_end_of_statement
        - match: '\b(?i:Get|Let|Set){{whitespace_or_end_of_statement}}'
          set: [inside_method_without_meta, method_name_without_meta]
        - include: unexpected_token
    - include: variable_definitions
    - include: allow_line_continuation
    - match: '\S' # only field/method/property definitions allowed inside a class definition
      scope: invalid.illegal.unexpected-token.asp

  inside_method_without_meta:
    - match: ''
      set: inside_method

  method_name_without_meta:
    - match: ''
      set: method_name

  variable_definitions:
    - match: '\b(?i:(?:(?:Public|Private)\s+)?Const){{whitespace_or_end_of_statement}}'
      scope: storage.modifier.source.asp
      push: constant_body
    - match: '\b(?i:Dim|ReDim(?:\s+Preserve)?){{whitespace_or_end_of_statement}}'
      scope: storage.modifier.source.asp
      push: dim_body
    - match: '\b(?i:Private|Public(?!\s+Default))\s+(?!(?i:Function|Sub|Property))'
      scope: storage.modifier.source.asp
      push: dim_body

  constant_body:
    - include: not_end_of_statement
    - include: illegal_names
    - match: '{{identifier}}'
      scope: meta.user-defined-constant.asp
      set:
        - include: not_end_of_statement
        - match: '\s*(=)\s*'
          captures:
            1: keyword.operator.asp
          set: [constant_separator, constant_value]
    - include: unexpected_token

  constant_separator:
    - match: '\s*(,)\s*'
      captures:
        1: punctuation.separator.variable-declaration.asp
      set: constant_body
    - include: allow_statement_separator
    - match: ''
      pop: true

  constant_value:
    - include: not_end_of_statement
    - match: '{{literal_number}}'
      scope: constant.numeric.asp
      pop: true
    - match: '{{constants}}'
      scope: constant.language.asp
      pop: true
    - match: '{{keywords}}'
      scope: support.type.vb.asp # maybe should be keyword or constant?
      pop: true
    - match: '"'
      scope: punctuation.definition.string.begin.asp
      set: inside_string
    - include: unexpected_token

  dim_body:
    - include: not_end_of_statement
    - include: illegal_names
    - match: '{{identifier}}'
      scope: meta.variable-definition.asp
      set:
        - include: allow_line_continuation
        - match: '(\()'
          captures:
            1: punctuation.definition.array.begin.asp
          push:
            - meta_scope: meta.array.definition.asp
            - include: not_end_of_statement
            - match: \)
              scope: punctuation.definition.array.end.asp
              pop: true
            - include: literals
            - match: ','
              scope: punctuation.definition.array.separator.asp
        - match: '\s*(,)\s*'
          captures:
            1: punctuation.separator.variable-declaration.asp
          set: dim_body
        - match: ''
          pop: true
    - include: unexpected_token

  method_definitions:
    - match: '\b(?:(?i:Public(\s+Default)?|Private)\s+)?(?i:Sub|Function){{whitespace_or_end_of_statement}}'
      scope: meta.method.source.asp meta.method.identifier.source.asp storage.type.function.asp
      push: [inside_method_without_meta, method_name_without_meta]

  method_name:
    - meta_content_scope: meta.method.source.asp meta.method.identifier.source.asp
    - include: allow_line_continuation
    - include: illegal_names
    - match: '{{asp_builtin_events}}'
      scope: support.function.event.asp entity.name.function.asp
      set: after_method_name
    - match: '{{identifier}}'
      scope: entity.name.function.asp
      set: after_method_name
    - match: $
      set: inside_method

  after_method_name:
    #- meta_content_scope: meta.method.source.asp meta.method.identifier.source.asp
    - match: \(
      scope: punctuation.definition.parameters.begin.asp
      set:
        - meta_scope: meta.method.source.asp meta.method.identifier.source.asp
        - match: \)
          scope: punctuation.definition.parameters.end.asp
          pop: true
        - match: $
          set: not_end_of_statement
        - match: '(?=\S)'
          push:
            - match: '(?=\)|$)'
              pop: true
            - include: not_end_of_statement
            - match: '((?i:ByRef|ByVal)\s+)?({{identifier}})'
              captures:
                1: storage.type.asp
                2: variable.parameter.function.asp
              push:
                - match: '(?=\)|$)'
                  pop: true
                - include: not_end_of_statement
                - match: '\s*(,)\s*'
                  captures:
                    1: punctuation.separator.parameter-declaration.asp
                  pop: true
                - match: '(?:(?![,)])\S)+'
                  scope: invalid.illegal.unexpected-token.asp
                  pop: true
            - match: '(?:(?![,)])\S)+'
              scope: invalid.illegal.unexpected-token.asp
    - match: '\s+'
      scope: meta.method.source.asp meta.method.identifier.source.asp
    - match: ':'
      scope: meta.method.source.asp keyword.operator.statement-separator.asp
      pop: true
    - include: allow_line_continuation
    - match: $
      pop: true
    - include: unexpected_token

  inside_method:
    - meta_content_scope: meta.method.source.asp meta.method.body.source.asp
    - match: '\b(?i:End){{whitespace_or_end_of_statement}}'
      scope: storage.type.function.end.asp
      set:
        - meta_content_scope: meta.method.source.asp storage.type.function.end.asp
        - include: allow_line_continuation
        - match: '\b(?i:Function|Sub|Property){{whitespace_or_end_of_statement}}'
          scope: meta.method.source.asp storage.type.function.end.asp
          pop: true
        - include: unexpected_token
    - include: statements

  control_flow:
    - match: '\b(?i:If){{whitespace_or_end_of_statement}}'
      scope: keyword.control.flow.asp
      push: then_could_be_block_or_single_line
    - match: '\b(?i:With){{whitespace_or_end_of_statement}}'
      scope: keyword.control.flow.asp
      push: [inside_control_flow_with, expect_not_end_of_statement]
    - match: '\b(?i:Select Case){{whitespace_or_end_of_statement}}'
      scope: keyword.control.flow.asp
      push: [inside_control_flow_select, literals_until_end_of_statement, expect_not_end_of_statement]

  then_could_be_block_or_single_line:
    - meta_content_scope: meta.between-if-and-then.asp
    - match: '[\t ]+'
      scope: '' # so that the meta_content_scope will apply to whitespace
    - match: '\b(?i:Then){{whitespace_or_end_of_statement}}'
      scope: keyword.control.flow.asp
      set:
        - match: '\s*(?=$|{{apostrophe_comment_begin}}|{{rem_comment_begin}})'
          set: inside_control_flow_if_block
        - match: '' # if the above didn't match, then it is a single line if block
          set: inside_control_flow_if_single_line
    - include: not_end_of_statement
    - include: literals

  elseif_then_block:
    - meta_content_scope: meta.between-if-and-then.asp
    - match: '\b(?i:Then){{whitespace_or_end_of_statement}}'
      scope: keyword.control.flow.asp
      set: inside_control_flow_if_block
    - include: literals
    - include: not_end_of_statement

  literals:
    - match: \)
      scope: invalid.illegal.stray-close-bracket.asp
    - match: '{{literal_number}}'
      scope: constant.numeric.asp
    - match: '{{constants}}'
      scope: support.type.vb.asp # maybe this should be constant.language.asp
    - match: '{{functions}}'
      scope: support.function.vb.asp
    - match: '{{keywords}}'
      scope: storage.type.asp
    - include: operators
    - match: '\b(?i:New){{whitespace_or_end_of_statement}}'
      scope: keyword.asp
      push: expect_not_end_of_statement
    - match: '{{reserved_words}}'
      scope: invalid.illegal.unexpected-token.literal.asp
    - match: '"'
      scope: punctuation.definition.string.begin.asp
      push: inside_string
    - match: '\b((?i:Request))\b(?:(?i:(\.)(BinaryRead)|(ClientCertificate|Cookies|Form|QueryString|ServerVariables)|(TotalBytes))\b)?'
      captures: # https://msdn.microsoft.com/en-us/library/ms524948%28v=vs.90%29.aspx
        1: support.class.asp
        2: keyword.object-access.asp
        3: support.function.asp
        4: support.class.collection.asp
        5: support.property.asp
    - match: '\b((?i:Response))\b(?:(?i:(\.)(AddHeader|AppendToLog|BinaryWrite|Clear|End|Flush|Redirect|Write)|(Buffer|CacheControl|Charset|CodePage|ContentType|Expires|ExpiresAbsolute|IsClientConnected|LCID|PICS|Status)|(Cookies))\b)?'
      captures: # https://msdn.microsoft.com/en-us/library/ms525405%28v=vs.90%29.aspx
        1: support.class.asp
        2: keyword.object-access.asp
        3: support.function.asp
        4: support.property.asp
        5: support.class.collection.asp
    #- match: '{{asp_builtin_classes}}'
    #  scope: support.class.asp
    #- match: '{{asp_builtin_funcs}}'
    #  scope: support.function.asp
    - match: '{{asp_builtin_events}}'
      scope: support.function.event.asp
    - match: '{{asp_builtin_collections}}'
      scope: support.class.collection.asp
    - match: '{{identifier}}'
      scope: meta.variable-reference.asp
    - match: \(
      push: inside_parens
    - include: allow_line_continuation

  inside_parens:
    - match: \)
      pop: true
    - match: \n
      scope: invalid.illegal.missing-close-bracket.asp
      pop: true
    - include: literals

  operators:
    - match: '(?i:Is\s+Not\b)'
      scope: invalid.illegal.unexpected-token.asp
    - match: '[=><+*^&/-]|\b(?i:Mod|And|Not|Or|Xor|Is)\b'
      scope: keyword.operator.asp
      push: expect_not_end_of_statement
    - match: ':'
      scope: keyword.operator.statement-separator.asp
    - match: \.
      scope: keyword.object-access.asp
      push:
        - match: '\s+' # . member access must be followed immediately by the identifier - no whitespace allowed
          scope: invalid.illegal.unexpected_token.asp
        - include: expect_not_end_of_statement

  inside_control_flow_with:
    - meta_scope: meta.with.block.asp
    - match: '\b(?i:End){{whitespace_or_end_of_statement}}'
      set:
        - meta_scope: keyword.control.flow.asp
        - include: allow_line_continuation
        - match: '\b(?i:With){{whitespace_or_end_of_statement}}'
          scope: keyword.control.flow.asp
          pop: true
        - include: unexpected_token
    - include: statements

  inside_control_flow_if_single_line:
    - meta_scope: meta.if.line.asp
    - match: $
      pop: true
    - include: inside_control_flow_if_common

  inside_control_flow_if_block:
    - meta_scope: meta.if.block.asp
    - match: '\b(?i:ElseIf){{whitespace_or_end_of_statement}}'
      scope: keyword.control.flow.asp
      set: elseif_then_block
    - match: '\b(?i:End){{whitespace_or_end_of_statement}}'
      set:
        - meta_scope: keyword.control.flow.asp
        - include: allow_line_continuation
        - match: '\b(?i:If){{whitespace_or_end_of_statement}}'
          scope: keyword.control.flow.asp
          pop: true
        - include: unexpected_token
    - include: inside_control_flow_if_common

  inside_control_flow_if_common:
    - match: '\b(?i:Else){{whitespace_or_end_of_statement}}'
      scope: keyword.control.flow.asp
      # the else retains the block or single line mode of the opening if statement, so we don't set a different context
    - include: statements

  inside_control_flow_select:
    - meta_scope: meta.select.block.asp
    - match: '\b(?i:End){{whitespace_or_end_of_statement}}'
      set:
        - meta_scope: keyword.control.flow.asp
        - include: allow_line_continuation
        - match: '\b(?i:Select){{whitespace_or_end_of_statement}}'
          scope: keyword.control.flow.asp
          pop: true
        - include: unexpected_token
    - match: '\b(?i:Case\s+Else){{whitespace_or_end_of_statement}}'
      scope: keyword.control.flow.asp
    - match: '\b(?i:Case){{whitespace_or_end_of_statement}}'
      scope: keyword.control.flow.asp
      push: [literals_until_end_of_statement, expect_not_end_of_statement]
    - include: statements

  literals_until_end_of_statement:
    - include: allow_statement_separator
    - match: $
      pop: true
    - include: literals
